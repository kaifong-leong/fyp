# Generated by Django 5.1 on 2025-04-08 06:10

import django.db.models.deletion
import django.utils.timezone
import markdownx.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='TestsslScan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=200, verbose_name='URL')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='URLItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=200, verbose_name='URL')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('value_sslv2', models.CharField(default='Unknown', max_length=100)),
                ('value_sslv3', models.CharField(default='Unknown', max_length=100)),
                ('value_tls1', models.CharField(default='Unknown', max_length=100)),
                ('value_tls11', models.CharField(default='Unknown', max_length=100)),
                ('value_tls12', models.CharField(default='Unknown', max_length=100)),
                ('value_tls13', models.CharField(default='Unknown', max_length=100)),
                ('tls10_ciphers', models.CharField(default='Unknown', max_length=10000)),
                ('tls11_ciphers', models.CharField(default='Unknown', max_length=10000)),
                ('tls12_ciphers', models.CharField(default='Unknown', max_length=10000)),
                ('tls13_ciphers', models.CharField(default='Unknown', max_length=10000)),
                ('kems', models.CharField(default='Unknown', max_length=10000)),
                ('ecdhe_curves', models.CharField(default='Unknown', max_length=10000)),
                ('tls12_sig_alg', models.CharField(default='Unknown', max_length=10000)),
                ('tls13_sig_alg', models.CharField(default='Unknown', max_length=10000)),
                ('cert_sig_alg', models.CharField(default='Unknown', max_length=10000)),
                ('cert', models.CharField(default='Unknown', max_length=10000)),
            ],
        ),
        migrations.CreateModel(
            name='Vulnerability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', markdownx.models.MarkdownxField(blank=True, max_length=1000)),
                ('severity', models.IntegerField(choices=[(2, 'High'), (1, 'Medium'), (0, 'Low')], default=0)),
            ],
            options={
                'verbose_name': 'vulnerability',
                'verbose_name_plural': 'vulnerabilities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TLSProtocolVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('major', models.PositiveIntegerField()),
                ('minor', models.PositiveIntegerField()),
                ('short', models.PositiveIntegerField(unique=True)),
                ('short_name', models.CharField(db_index=True, default='', max_length=255)),
                ('vulnerabilities', models.ManyToManyField(blank=True, to='testssl_app.vulnerability')),
            ],
            options={
                'verbose_name': 'TLS version',
                'verbose_name_plural': 'TLS versions',
                'ordering': ['major', 'minor'],
            },
        ),
        migrations.CreateModel(
            name='TLSProtocolVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(db_index=True, max_length=200, unique=True)),
                ('long_name', models.CharField(max_length=300)),
                ('vulnerabilities', models.ManyToManyField(blank=True, to='testssl_app.vulnerability')),
            ],
            options={
                'verbose_name': 'TLS protocol variant',
                'verbose_name_plural': 'TLS protocol variants',
                'ordering': ['short_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RSAKeyLength',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(db_index=True, max_length=200, unique=True)),
                ('long_name', models.CharField(max_length=300)),
                ('classical_strength', models.IntegerField(default=0, null=True)),
                ('quantum_strength', models.IntegerField(default=0, null=True)),
                ('vulnerabilities', models.ManyToManyField(blank=True, to='testssl_app.vulnerability')),
            ],
            options={
                'verbose_name': 'RSA key length',
                'verbose_name_plural': 'RSA key lengths',
                'ordering': ['short_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KexAlgorithm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(db_index=True, max_length=200, unique=True)),
                ('long_name', models.CharField(max_length=300)),
                ('pfs_support', models.BooleanField(default=False, null=True)),
                ('quantum_strength', models.IntegerField(default=0, null=True)),
                ('hybrid', models.BooleanField(default=False, null=True)),
                ('vulnerabilities', models.ManyToManyField(blank=True, to='testssl_app.vulnerability')),
            ],
            options={
                'verbose_name': 'key exchange algorithm',
                'verbose_name_plural': 'key exchange algorithms',
                'ordering': ['short_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HashAlgorithm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(db_index=True, max_length=200, unique=True)),
                ('long_name', models.CharField(max_length=300)),
                ('vulnerabilities', models.ManyToManyField(blank=True, to='testssl_app.vulnerability')),
            ],
            options={
                'verbose_name': 'hash algorithm',
                'verbose_name_plural': 'hash algorithms',
                'ordering': ['short_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EncAlgorithm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(db_index=True, max_length=200, unique=True)),
                ('long_name', models.CharField(max_length=300)),
                ('classical_strength', models.IntegerField(default=0, null=True)),
                ('quantum_strength', models.IntegerField(default=0, null=True)),
                ('aead_algorithm', models.BooleanField(default=False, null=True)),
                ('vulnerabilities', models.ManyToManyField(blank=True, to='testssl_app.vulnerability')),
            ],
            options={
                'verbose_name': 'encryption algorithm',
                'verbose_name_plural': 'encryption algorithms',
                'ordering': ['short_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ECNamedCurve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(db_index=True, max_length=200, unique=True)),
                ('long_name', models.CharField(max_length=300)),
                ('quantum_strength', models.IntegerField(default=0, null=True)),
                ('classical_strength', models.IntegerField(default=0, null=True)),
                ('hybrid', models.BooleanField(default=False, null=True)),
                ('kex_algorithm', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='testssl_app.kexalgorithm')),
                ('vulnerabilities', models.ManyToManyField(blank=True, to='testssl_app.vulnerability')),
            ],
            options={
                'verbose_name': 'EC named curve',
                'verbose_name_plural': 'EC named curves',
                'ordering': ['short_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DHKeyLength',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(db_index=True, max_length=200, unique=True)),
                ('long_name', models.CharField(max_length=300)),
                ('classical_strength', models.IntegerField(default=0, null=True)),
                ('quantum_strength', models.IntegerField(default=0, null=True)),
                ('vulnerabilities', models.ManyToManyField(blank=True, to='testssl_app.vulnerability')),
            ],
            options={
                'verbose_name': 'DH key length',
                'verbose_name_plural': 'DH key lengths',
                'ordering': ['short_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompressionMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(db_index=True, max_length=200, unique=True)),
                ('long_name', models.CharField(max_length=300)),
                ('vulnerabilities', models.ManyToManyField(blank=True, to='testssl_app.vulnerability')),
            ],
            options={
                'verbose_name': 'compression method',
                'verbose_name_plural': 'compression methods',
                'ordering': ['short_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AuthAlgorithm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(db_index=True, max_length=200, unique=True)),
                ('long_name', models.CharField(max_length=300)),
                ('quantum_strength', models.IntegerField(default=0, null=True)),
                ('hybrid', models.BooleanField(default=False, null=True)),
                ('vulnerabilities', models.ManyToManyField(blank=True, to='testssl_app.vulnerability')),
            ],
            options={
                'verbose_name': 'authentication algorithm',
                'verbose_name_plural': 'authentication algorithms',
                'ordering': ['short_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='X509Certificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fingerprint', models.CharField(max_length=200, unique=True)),
                ('issuer', models.CharField(default='', max_length=200)),
                ('subject', models.CharField(default='', max_length=200)),
                ('serial_number', models.CharField(default='', max_length=200)),
                ('not_valid_before', models.DateTimeField(default=None, null=True)),
                ('not_valid_after', models.DateTimeField(default=None, null=True)),
                ('key_length', models.IntegerField(null=True)),
                ('key_algorithm', models.CharField(blank=True, default='', max_length=200)),
                ('key_type', models.CharField(blank=True, default='', max_length=200)),
                ('exponent', models.CharField(default='', max_length=200)),
                ('cert_dump', models.TextField(default='')),
                ('auth_algorithm', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='certificates_as_auth_algorithm', to='testssl_app.authalgorithm')),
                ('curve', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='testssl_app.ecnamedcurve')),
                ('hash_algorithm', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='certificates_as_hash_algorithm', to='testssl_app.hashalgorithm')),
            ],
            options={
                'verbose_name': 'certificate',
                'verbose_name_plural': 'certificates',
            },
        ),
        migrations.CreateModel(
            name='CipherSuite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(db_index=True, max_length=200, unique=True)),
                ('long_name', models.CharField(max_length=300)),
                ('hex_byte_1', models.CharField(max_length=4)),
                ('hex_byte_2', models.CharField(max_length=4)),
                ('security', models.IntegerField(blank=True, choices=[(0, 'recommended'), (1, 'secure'), (2, 'weak'), (3, 'insecure')], default=3, verbose_name='security level')),
                ('auth_algorithm', models.ForeignKey(blank=True, default='', on_delete=django.db.models.deletion.CASCADE, to='testssl_app.authalgorithm')),
                ('enc_algorithm', models.ForeignKey(blank=True, default='', on_delete=django.db.models.deletion.CASCADE, to='testssl_app.encalgorithm')),
                ('hash_algorithm', models.ForeignKey(blank=True, default='', on_delete=django.db.models.deletion.CASCADE, to='testssl_app.hashalgorithm')),
                ('kex_algorithm', models.ForeignKey(blank=True, default='', on_delete=django.db.models.deletion.CASCADE, to='testssl_app.kexalgorithm')),
                ('protocol_variant', models.ForeignKey(blank=True, default='', on_delete=django.db.models.deletion.CASCADE, to='testssl_app.tlsprotocolvariant')),
                ('tls_version', models.ManyToManyField(blank=True, to='testssl_app.tlsprotocolversion')),
                ('vulnerabilities', models.ManyToManyField(blank=True, to='testssl_app.vulnerability')),
            ],
            options={
                'verbose_name': 'cipher suite',
                'verbose_name_plural': 'cipher suites',
                'ordering': ['short_name'],
                'unique_together': {('hex_byte_1', 'hex_byte_2')},
            },
        ),
    ]
